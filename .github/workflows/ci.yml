name: CI

on:
  push:
    branches: ["**"]
    tags: ["v*", "V*"]
  pull_request:
    branches: ["**"]
  release:
    types: [created, published]
  workflow_dispatch:

jobs:
  build:
    name: Build (Docker + uv)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      
      - name: Sync dependencies with uv
        run: |
          uv venv
          uv sync --all-extras --dev

      - name: Verify uv environment
        run: |
          uv --version
          uv run python -c "import sys; print(sys.version)"
          uv run python -c "import LDDC; print('LDDC import ok')"

      - name: Build Docker image
        run: |
          docker build -t lddc-fastapi:latest .

      - name: Smoke run container and health check
        run: |
          docker run -d --name lddc-fastapi -p 8000:8000 lddc-fastapi:latest
          sleep 5
          curl --fail http://localhost:8000/health

      - name: Container logs on failure
        if: failure()
        run: |
          docker logs lddc-fastapi || true

      - name: Cleanup container
        if: always()
        run: |
          docker rm -f lddc-fastapi || true

  test:
    name: Test (uv pytest)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Sync dependencies with uv
        run: |
          uv venv
          uv sync --all-extras --dev

      - name: Run tests (exclude flaky network)
        run: |
          uv run pytest -q -k "not test_real_translation" --maxfail=1

  release:
    name: Release (GHCR + artifact)
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    env:
      IMAGE_NAME: lddc-fastapi
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare metadata
        id: meta
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
            echo "VERSION=manual-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          fi
          OWNER_LC="${GITHUB_REPOSITORY_OWNER,,}"
          echo "OWNER_LC=${OWNER_LC}" >> "$GITHUB_OUTPUT"

      - name: Build and push (linux/amd64, linux/arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}

      - name: Create deployable tarball artifact
        shell: bash
        run: |
          docker pull ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
          docker save ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }} | gzip > ${{ env.IMAGE_NAME }}-${{ steps.meta.outputs.VERSION }}.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-${{ steps.meta.outputs.VERSION }}.tar.gz
          path: ${{ env.IMAGE_NAME }}-${{ steps.meta.outputs.VERSION }}.tar.gz