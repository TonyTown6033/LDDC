name: test LDDC FastAPI

on:
    push:
        branches: 
          - main
          - dev
          - test-ci-workflows
        paths:
            - "**.py"
            - "fastapi_app.py"
            - "requirements.txt"
            - "static/**"
            - ".github/workflows/test-fastapi.yml"
    pull_request:
        branches:
          - main
          - dev
          - test-ci-workflows
        paths:
            - "**.py"
            - "fastapi_app.py"
            - "requirements.txt"
            - "static/**"
            - ".github/workflows/test-fastapi.yml"
    workflow_dispatch:

jobs:
    test-fastapi:
        name: Test FastAPI
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-22.04, macos-13, windows-latest]
                python-version: ["3.9", "3.10", "3.11", "3.12"]
                include:
                  - os: macos-latest
                    python-version: "3.12"
                  - os: ubuntu-24.04
                    python-version: "3.12"

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                python-version: ${{ matrix.python-version }}

            - name: Cache pip dependencies
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Cache pip dependencies
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install system dependencies (Linux)
              if: runner.os == 'Linux'
              run: |
                sudo apt-get update
                sudo apt-get install -y ffmpeg

            - name: Install system dependencies (macOS)
              if: runner.os == 'macOS'
              run: |
                brew install ffmpeg

            - name: Install system dependencies (Windows)
              if: runner.os == 'Windows'
              run: |
                choco install ffmpeg -y

            - name: Install Python dependencies
              run: |
                python -m pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest pytest-cov pytest-asyncio httpx
                pip install -e .

            - name: Verify FastAPI installation
              run: |
                python -c "import fastapi; print(f'FastAPI version: {fastapi.__version__}')"
                python -c "import uvicorn; print(f'Uvicorn version: {uvicorn.__version__}')"

            - name: Run FastAPI unit tests
              run: |
                pytest tests/test_fastapi.py -v --cov=LDDC --cov-report=xml --cov-report=term

            - name: Run FastAPI frontend tests
              run: |
                pytest tests/test_frontend.py -v --cov=LDDC --cov-append --cov-report=xml --cov-report=term

            - name: Start FastAPI service for integration tests
              run: |
                python fastapi_app.py &
                sleep 10
              shell: bash

            - name: Health check
              run: |
                curl -f http://localhost:8000/health || exit 1
              shell: bash

            - name: Test search API
              run: |
                curl -f -X GET "http://localhost:8000/api/search?keyword=test&source=QM&search_type=SONG&page=1" || exit 1
              shell: bash

            - name: Test static files
              run: |
                curl -f http://localhost:8000/static/style.css || exit 1
                curl -f http://localhost:8000/static/script.js || exit 1
              shell: bash

            - name: Stop FastAPI service
              run: |
                pkill -f "python fastapi_app.py" || true
              shell: bash

            - name: Upload coverage reports
              uses: codecov/codecov-action@v4
              if: matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.12'
              with:
                file: ./coverage.xml
                flags: fastapi
                name: fastapi-coverage
                fail_ci_if_error: false

            - name: Save test artifacts
              if: always()
              run: |
                mkdir -p test-artifacts
                cp coverage.xml test-artifacts/ 2>/dev/null || true
                cp -r htmlcov test-artifacts/ 2>/dev/null || true
              shell: bash

            - name: Upload test artifacts
              uses: actions/upload-artifact@v4
              if: always()
              with:
                name: fastapi-test-artifacts-${{ matrix.os }}-py${{ matrix.python-version }}
                path: test-artifacts/
                retention-days: 7

    docker-test:
        name: Docker Test
        runs-on: ubuntu-latest
        needs: test-fastapi

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Create Dockerfile for testing
              run: |
                cat > Dockerfile.test << 'EOF'
                FROM python:3.12-slim

                WORKDIR /app

                # Install system dependencies
                RUN apt-get update && apt-get install -y \
                    curl \
                    && rm -rf /var/lib/apt/lists/*

                # Copy requirements and install Python dependencies
                COPY requirements.txt .
                RUN pip install --no-cache-dir -r requirements.txt

                # Copy application code
                COPY . .

                # Install the package
                RUN pip install -e .

                # Expose port
                EXPOSE 8000

                # Health check
                HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
                  CMD curl -f http://localhost:8000/health || exit 1

                # Run the application
                CMD ["python", "fastapi_app.py"]
                EOF

            - name: Build Docker image
              run: |
                docker build -f Dockerfile.test -t lddc-fastapi:test .

            - name: Run Docker container
              run: |
                docker run -d --name lddc-test -p 8000:8000 lddc-fastapi:test
                sleep 15

            - name: Test Docker container
              run: |
                # Health check
                curl -f http://localhost:8000/health
                
                # API test
                curl -f -X GET "http://localhost:8000/api/search?keyword=test&source=QM&search_type=SONG&page=1"
                
                # Static files test
                curl -f http://localhost:8000/static/style.css
                curl -f http://localhost:8000/static/script.js

            - name: Check container logs
              if: always()
              run: |
                docker logs lddc-test

            - name: Stop and remove container
              if: always()
              run: |
                docker stop lddc-test || true
                docker rm lddc-test || true