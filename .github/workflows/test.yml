name: test LDDC

on:
    push:
        branches: 
          - main
          - dev
          - test-ci-workflows
        paths:
            - "**.py"
            - "requirements.txt"
            - ".github/workflows/test.yml"
    pull_request:
        branches:
          - main
          - dev
          - test-ci-workflows
        paths:
            - "**.py"
            - "requirements.txt"
            - ".github/workflows/test.yml"
    workflow_dispatch:

jobs:

    test:
        strategy:
            fail-fast: false
            matrix:
                os: [macos-13, windows-latest]
                arch: [x64]
                include:
                  - os: macos-latest
                    arch: arm64
        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-python@v5
              with:
                python-version: "3.12"
                architecture: ${{ matrix.arch }}

            - name: Cache pip dependencies
              uses: actions/cache@v4
              with:
                path: ~/.cache/pip
                key: ${{ runner.os }}-pip-${{ hashFiles('requirements-tests.txt', 'requirements.txt') }}
                restore-keys: |
                  ${{ runner.os }}-pip-

            - name: Install dependencies
              run: |
                pip install -Ur requirements-tests.txt
                pip install .

            - name: Install FFmpeg(Linux)
              if: runner.os == 'Linux'
              run: sudo apt-get update && sudo apt-get install -y ffmpeg
      
            - name: Install FFmpeg(Windows)
              if: runner.os == 'Windows'
              run: choco install ffmpeg -y

            - name: Install FFmpeg(Mac)
              if: runner.os == 'macOS'
              run: brew install ffmpeg

            - name: Install GUI dependencies
              if: runner.os == 'Linux'
              run: |
                sudo apt-get update
                sudo apt-get install -y qtbase5-dev libqt5gui5 libqt5widgets5 xvfb

            - name: Install FastAPI test dependencies
              run: |
                pip install fastapi uvicorn httpx pytest-asyncio

            - name: Run GUI tests
              run: |
                pytest tests/test_api.py tests/test_has_lyrics.py tests/test_translate.py --cov=LDDC --cov-report=xml --cov-report=html --cov-report=term --disable-warnings --enable-coredumpy --coredumpy-dir tests/artifacts/dumps -v

            - name: Run FastAPI tests
              run: |
                pytest tests/test_fastapi.py tests/test_frontend.py --cov=LDDC --cov-append --cov-report=xml --cov-report=html --cov-report=term --disable-warnings -v

            - name: Start FastAPI service for integration tests
              run: |
                python fastapi_app.py &
                sleep 10
              shell: bash

            - name: FastAPI health check
              run: |
                curl -f http://localhost:8000/health || exit 1
              shell: bash

            - name: FastAPI integration tests
              run: |
                # Test search API
                curl -f -X GET "http://localhost:8000/api/search?keyword=test&source=QM&search_type=SONG&page=1" || exit 1
                
                # Test static files
                curl -f http://localhost:8000/static/style.css || exit 1
                curl -f http://localhost:8000/static/script.js || exit 1
              shell: bash

            - name: Stop FastAPI service
              if: always()
              run: |
                pkill -f "python fastapi_app.py" || true
              shell: bash

            - name: Save test artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: test-results-${{ matrix.os }}-${{ matrix.arch }}
                path: |
                  htmlcov/
                  coverage.xml
                  .coverage
                retention-days: 7